!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
:	.\mappings.vim	/^nnoremap : ;$/;"	m
;	.\mappings.vim	/^nnoremap ; :$/;"	m
<BS>	.\settings.vim	/^    inoremap <expr><BS> neocomplete#smart_close_popup()."\\<C-h>"$/;"	m
<C-d>	.\mappings.vim	/^nmap <C-d> <C-d>zz$/;"	m
<C-h>	.\settings.vim	/^    inoremap <expr><C-h> neocomplete#smart_close_popup()."\\<C-h>"$/;"	m
<C-k>	.\mappings.vim	/^    imap <C-k> <Plug>(neosnippet_expand_or_jump)$/;"	m
<C-l>	.\mappings.vim	/^    inoremap <expr><C-l> neocomplete#complete_common_string()$/;"	m
<C-s>	.\mappings.vim	/^inoremap <C-s> <ESC>:w<CR>i$/;"	m
<C-s>	.\mappings.vim	/^nnoremap <C-s> <ESC>:w<CR>$/;"	m
<C-u>	.\mappings.vim	/^nmap <C-u> <C-u>zz$/;"	m
<C-v>	.\mappings.vim	/^nnoremap <C-v> v$/;"	m
<C-w>u	.\functions.vim	/^nmap <C-w>u :call MergeTabs()<CR>$/;"	m
<F5>	.\mappings.vim	/^nnoremap <silent><F5> <ESC>:make<CR>$/;"	m
<Leader>fn	.\functions.vim	/^map <Leader>fn :call RenameFile()<cr>$/;"	m
<Leader>q	.\mappings.vim	/^nnoremap <Leader>q :call QuickfixToggle()<cr>$/;"	m
<TAB>	.\mappings.vim	/^    inoremap <expr><TAB> pumvisible() ? "\\<C-n>" : "\\<TAB>"$/;"	m
<down>	.\mappings.vim	/^ino <down> <Esc>$/;"	m
<down>	.\mappings.vim	/^no <down> <Nop>$/;"	m
<leader>srcw	.\mappings.vim	/^nnoremap <leader>srcw :%s\/\\<<C-r>=expand('<cword>')<CR>\/\/gc<left><left><left>$/;"	m
<leader>srw	.\mappings.vim	/^nnoremap <leader>srw :%s\/\/gc<left><left><left>$/;"	m
<leader>wab	.\mappings.vim	/^nnoremap <silent> <leader>wab :1,9000bwipeout<tCR>$/;"	m
<leader>wtt	.\mappings.vim	/^nnoremap <silent> <leader>wtt :set invwrap<CR>$/;"	m
<left>	.\mappings.vim	/^ino <left> <Esc>$/;"	m
<left>	.\mappings.vim	/^no <left> <Nop>$/;"	m
<right>	.\mappings.vim	/^ino <right> <Esc>$/;"	m
<right>	.\mappings.vim	/^no <right> <Nop>$/;"	m
<up>	.\mappings.vim	/^ino <up> <Esc>$/;"	m
<up>	.\mappings.vim	/^no <up> <Nop>$/;"	m
G	.\mappings.vim	/^nmap G Gzz$/;"	m
MergeTabs	.\functions.vim	/^function! MergeTabs()$/;"	f
N	.\mappings.vim	/^nmap N Nzz$/;"	m
QuickfixToggle	.\functions.vim	/^fun! QuickfixToggle()$/;"	f
RenameFile	.\functions.vim	/^function! RenameFile() " Thanks to Gary Bernhardt & Ben Orenstein$/;"	f
Sinit	.\functions.vim	/^fun! s:Sinit(filen)$/;"	f
StripTrailingWhiteSpaces	.\functions.vim	/^fun! <SID>StripTrailingWhiteSpaces()$/;"	f
Y	.\mappings.vim	/^nnoremap Y y\$$/;"	m
add	.\plug.vim	/^function! s:add(repo, ...)$/;"	f
assign_name	.\plug.vim	/^function! s:assign_name()$/;"	f
assoc	.\plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
bar	.\plug.vim	/^function! s:bar()$/;"	f
clean	.\plug.vim	/^function! s:clean(force)$/;"	f
compare_git_uri	.\plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
define_commands	.\plug.vim	/^function! s:define_commands()$/;"	f
diff	.\plug.vim	/^function! s:diff()$/;"	f
dirpath	.\plug.vim	/^  function! s:dirpath(path)$/;"	f
do	.\plug.vim	/^function! s:do(pull, force, todo)$/;"	f
err	.\plug.vim	/^function! s:err(msg)$/;"	f
esc	.\plug.vim	/^function! s:esc(path)$/;"	f
escrtp	.\plug.vim	/^function! s:escrtp(path)$/;"	f
extract_name	.\plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
find_name	.\plug.vim	/^function! s:find_name(lnum)$/;"	f
finish	.\plug.vim	/^function! s:finish(pull)$/;"	f
format_message	.\plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
g:airline#extensions#tabline#enabled	.\settings.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#theme	.\settings.vim	/^let g:airline#theme = 'hybrid'$/;"	v
g:ctrlp_custom_ignore	.\settings.vim	/^let g:ctrlp_custom_ignore = '\\v[\\\/]\\.(git|hg|svn)$'$/;"	v
g:ctrlp_working_path_mode	.\settings.vim	/^let g:ctrlp_working_path_mode = 'ra'$/;"	v
g:loaded_plug	.\plug.vim	/^let g:loaded_plug = 1$/;"	v
g:neocomplete#enable_at_startup	.\settings.vim	/^    let g:neocomplete#enable_at_startup = 1$/;"	v
g:neocomplete#enable_smart_case	.\settings.vim	/^    let g:neocomplete#enable_smart_case = 1$/;"	v
g:neocomplete#sources#syntax#min_keyworld_length	.\settings.vim	/^    let g:neocomplete#sources#syntax#min_keyworld_length = 3$/;"	v
g:plugs_order	.\plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:quickfix_is_open	.\functions.vim	/^let g:quickfix_is_open = 0$/;"	v
git_valid	.\plug.vim	/^function! s:git_valid(spec, check_branch)$/;"	f
git_version_requirement	.\plug.vim	/^function! s:git_version_requirement(...)$/;"	f
glob_dir	.\plug.vim	/^function! s:glob_dir(path)$/;"	f
infer_properties	.\plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
install	.\plug.vim	/^function! s:install(force, names)$/;"	f
is_local_plug	.\plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
is_managed	.\plug.vim	/^function! s:is_managed(name)$/;"	f
is_preview_window_open	.\plug.vim	/^function! s:is_preview_window_open()$/;"	f
j	.\mappings.vim	/^nnoremap <expr> j (v:count == 0 ? 'gj' : 'j')$/;"	m
job_abort	.\plug.vim	/^function! s:job_abort()$/;"	f
job_handler	.\plug.vim	/^function! s:job_handler(name) abort$/;"	f
k	.\mappings.vim	/^nnoremap <expr> k (v:count == 0 ? 'gk' : 'k')$/;"	m
lastline	.\plug.vim	/^function! s:lastline(msg)$/;"	f
lines	.\plug.vim	/^function! s:lines(msg)$/;"	f
loaded_names	.\plug.vim	/^function! s:loaded_names()$/;"	f
lod	.\plug.vim	/^function! s:lod(names, types)$/;"	f
lod_cmd	.\plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
lod_ft	.\plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
lod_map	.\plug.vim	/^function! s:lod_map(map, names, prefix)$/;"	f
log	.\plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
logpos	.\plug.vim	/^function! s:logpos(name)$/;"	f
lpad	.\plug.vim	/^function! s:lpad(str, len)$/;"	f
mapleader	.\mappings.vim	/^let mapleader = ","$/;"	v
n	.\mappings.vim	/^nmap n nzz$/;"	m
names	.\plug.vim	/^function! s:names(...)$/;"	f
new_window	.\plug.vim	/^function! s:new_window()$/;"	f
parse_options	.\plug.vim	/^function! s:parse_options(arg)$/;"	f
path	.\plug.vim	/^  function! s:path(path)$/;"	f
plug#begin	.\plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	.\plug.vim	/^function! plug#end()$/;"	f
plug#helptags	.\plug.vim	/^function! plug#helptags()$/;"	f
plug#load	.\plug.vim	/^function! plug#load(...)$/;"	f
plug_window_exists	.\plug.vim	/^function! s:plug_window_exists()$/;"	f
prepare	.\plug.vim	/^function! s:prepare()$/;"	f
preview_commit	.\plug.vim	/^function! s:preview_commit()$/;"	f
progress_bar	.\plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
progress_opt	.\plug.vim	/^function! s:progress_opt(base)$/;"	f
reap	.\plug.vim	/^function! s:reap(name)$/;"	f
reload	.\plug.vim	/^function! s:reload()$/;"	f
remove_rtp	.\plug.vim	/^function! s:remove_rtp()$/;"	f
remove_triggers	.\plug.vim	/^function! s:remove_triggers(name)$/;"	f
reorg_rtp	.\plug.vim	/^function! s:reorg_rtp()$/;"	f
retry	.\plug.vim	/^function! s:retry()$/;"	f
revert	.\plug.vim	/^function! s:revert()$/;"	f
rtp	.\plug.vim	/^  function! s:rtp(spec)$/;"	f
s:TYPE	.\plug.vim	/^let s:TYPE = {$/;"	v
s:base_spec	.\plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:cpo_save	.\plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:first_rtp	.\plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:is_win	.\plug.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:last_rtp	.\plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:loaded	.\plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:mac_gui	.\plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:me	.\plug.vim	/^let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:nvim	.\plug.vim	/^let s:nvim = has('nvim') && !s:is_win$/;"	v
s:plug_buf	.\plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	.\plug.vim	/^let s:plug_src = 'https:\/\/raw.githubusercontent.com\/junegunn\/vim-plug\/master\/plug.vim'$/;"	v
s:plug_tab	.\plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:py2	.\plug.vim	/^let s:py2 = has('python') && !s:is_win$/;"	v
s:ruby	.\plug.vim	/^let s:ruby = has('ruby') && (v:version >= 703 || v:version == 702 && has('patch374'))$/;"	v
s:triggers	.\plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
section	.\plug.vim	/^function! s:section(flags)$/;"	f
shellesc	.\plug.vim	/^function! s:shellesc(arg)$/;"	f
snapshot	.\plug.vim	/^function! s:snapshot(...) abort$/;"	f
source	.\plug.vim	/^function! s:source(from, ...)$/;"	f
spawn	.\plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
split_rtp	.\plug.vim	/^function! s:split_rtp()$/;"	f
status	.\plug.vim	/^function! s:status()$/;"	f
status_load	.\plug.vim	/^function! s:status_load(lnum)$/;"	f
status_update	.\plug.vim	/^function! s:status_update() range$/;"	f
switch_in	.\plug.vim	/^function! s:switch_in()$/;"	f
switch_out	.\plug.vim	/^function! s:switch_out(...)$/;"	f
syntax	.\plug.vim	/^function! s:syntax()$/;"	f
system	.\plug.vim	/^function! s:system(cmd, ...)$/;"	f
system_chomp	.\plug.vim	/^function! s:system_chomp(...)$/;"	f
tick	.\plug.vim	/^function! s:tick()$/;"	f
to_a	.\plug.vim	/^function! s:to_a(v)$/;"	f
to_s	.\plug.vim	/^function! s:to_s(v)$/;"	f
trim	.\plug.vim	/^function! s:trim(str)$/;"	f
update	.\plug.vim	/^function! s:update(force, names)$/;"	f
update_finish	.\plug.vim	/^function! s:update_finish()$/;"	f
update_impl	.\plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
update_python	.\plug.vim	/^function! s:update_python()$/;"	f
update_ruby	.\plug.vim	/^function! s:update_ruby()$/;"	f
update_vim	.\plug.vim	/^function! s:update_vim()$/;"	f
upgrade	.\plug.vim	/^function! s:upgrade()$/;"	f
upgrade_specs	.\plug.vim	/^function! s:upgrade_specs()$/;"	f
upgrade_using_python	.\plug.vim	/^function! s:upgrade_using_python(new)$/;"	f
upgrade_using_ruby	.\plug.vim	/^function! s:upgrade_using_ruby(new)$/;"	f
v	.\mappings.vim	/^nnoremap v <C-v>$/;"	m
version_requirement	.\plug.vim	/^function! s:version_requirement(val, min)$/;"	f
with_cd	.\plug.vim	/^function! s:with_cd(cmd, dir)$/;"	f
{	.\mappings.vim	/^nmap { {zz$/;"	m
}	.\mappings.vim	/^nmap } }zz$/;"	m
